" Modeline and Notes {
" vim: set foldmarker={,} foldlevel=0 foldmethod=marker :
"
" I have copied a lot of Steve Francia's .vimrc file which can
" be found here: http://spf13.com/post/ultimate-vim-config
"
" }

set nocompatible " must be first line

" Setup Bundle Support (pathogen plugin) {
    runtime bundle/pathogen/autoload/pathogen.vim
    call pathogen#infect()
    silent! call pathogen#helptags()
" }

" Basics {
    set hidden          " Not sure what this does, but apparently it should be a default setting
" }

" General {
    filetype plugin indent on                       " Automatically detect file types.
    syntax enable                                   " syntax highlighting
    set encoding=utf-8
    scriptencoding utf-8
    set autowrite
    "set shortmess+=filmnrxoOtT                      " abbrev. of messages (avoids 'hit enter')
    set viewoptions=cursor,folds,options,slash,unix " better unix / windows compatibility
    "set virtualedit=onemore                         " allow for cursor beyond last character
    set history=1000                                " Store a ton of history (default is 20)
    set nospell                                     " spell checking off
    set visualbell                                  " don't beep
    set noerrorbells                                " don't beep
    set clipboard=unnamed                           " allow yanking to OS X pasteboard

    " Setting up the directories {
        set backup                        " backups are nice ...
        set backupdir=$HOME/.vim/tmp/backup// " but not when they clog
        set directory=$HOME/.vim/tmp/swap//   " same for swap files
        set viewdir=$HOME/.vim/tmp/view//     " same for view files

        " Creating directories if they don't exist
        silent execute '!mkdir -p $HOME/.vim/tmp/backup'
        silent execute '!mkdir -p $HOME/.vim/tmp/swap'
        silent execute '!mkdir -p $HOME/.vim/tmp/view'
        " if has('autocmd') "remain compatible with older versions of Vim that do not have the autocmd functions
        "   autocmd BufWinEnter * silent! loadview      "make vim load view (state) (folds, cursor, etc)
        "   autocmd BufWinLeave * silent! mkview        "make vim save view (state) (folds, cursor, etc)
        " endif
    " }
" }

" Filetype Specifics {

    if has('autocmd')
      augroup set_filetypes
        autocmd!
        autocmd BufNewFile,BufRead *.json    setl filetype=json
        autocmd BufNewFile,BufRead *.less    setl filetype=css
        autocmd BufNewFile,BufRead *.md      setl filetype=markdown
        autocmd BufNewFile,BufRead Guardfile setl filetype=ruby
        autocmd BufNewFile,BufRead *.coffee  setl foldmethod=indent nofoldenable
      augroup END
    endif
" }

" Vim UI {
    set t_Co=256    " enable 256 colours in the terminal
    set showmode    " display the current mode

    set cursorline  " highlight current line

    if has('cmdline_info')
      set ruler                                          " show the ruler
      set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " a ruler on steroids
      set showcmd                                        " show partial commands in status line and
    endif

    if has('statusline')
      set laststatus=2                                      " always show statusline
      " Use the commented line if fugitive isn't installed
      "set statusline=%<%f\ %=\:\b%n%y%m%r%w\ %l,%c%V\ %P   " a statusline, also on steroids
      set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
    endif

    " Use a bar-shaped cursor for insert mode, even through tmux.
    if exists('$TMUX')
        let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
        let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
    else
        let &t_SI = "\<Esc>]50;CursorShape=1\x7"
        let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    endif

    set backspace=indent,eol,start " backspace for dummys
    set linespace=0                " No extra spaces between rows
    set number                     " Line numbers on
    set showmatch                  " show matching brackets/parenthesis
    set incsearch                  " find as you type search
    set hlsearch                   " highlight search terms
    set ignorecase                 " case insensitive search
    set smartcase                  " case sensitive when uc present
    set winminheight=0             " windows can be 0 line high
    set wildmenu                   " show list instead of just completing
    set wildmode=list:longest,full " comand <Tab> completion, list matches, then longest common part, then all.
    set whichwrap=b,s,h,l,<,>,[,]  " backspace and cursor keys wrap to
    set scrolloff=3                " minimum lines to keep above and below cursor
    set foldenable                 " auto fold code
    set gdefault                   " the /g flag on :s substitutions by default
" }

" Formatting {
    set nowrap                        " turn text wrap off by default
    set autoindent                    " indent at the same level of the previous line
    set tabstop=2                     " an indentation every two columns
    set softtabstop=2                 " when backspacing treat spaces created by expandtab as tabs
    set shiftwidth=2                  " use indents of 2 spaces
    set shiftround                    " round indentations to a multiple of shiftwidth
    set expandtab                     " tabs are expanded to spaces
    set matchpairs+=<:>               " match, to be used with %

    " Show all whitespace (from http://stackoverflow.com/questions/1675688/make-vim-show-all-white-spaces-as-a-character)
    set list
    set listchars=tab:▸\ ,trail:~,nbsp:~,extends:»,precedes:« " This shows spaces as ~ when using the 'set list' command
    "set listchars+=eol:¬                                      " uncomment this to enable displaying end of line characters
" }

" Key Mappings {

    " Change mapleader key
    let maplocalleader = ","

    " Make escaping from insert mode easier
    inoremap jk <esc>
    inoremap <esc> <nop>

    " Easier moving in tabs and windows
    noremap <C-J> <C-W>j
    noremap <C-K> <C-W>k
    noremap <C-L> <C-W>l
    noremap <C-H> <C-W>h
    noremap <S-H> gT
    noremap <S-L> gt

    " Quickly jump between two most recent buffers
    noremap <Space> <C-^>

    " Easier moving between wrapped lines
    nnoremap <silent> j gj
    nnoremap <silent> k gk

    " Yank from the cursor to the end of the line, to be consistent with C and D.
    "nnoremap Y y$ "TODO: this doesn't work ... fix.

    " Clear the search buffer (http://nvie.com/posts/how-i-boosted-my-vim/)
    nnoremap <silent> <LocalLeader><Space> :nohlsearch<CR>

    " Toggle settings
    nnoremap <Leader>c :set cursorline!<CR>
    nnoremap <Leader>l :set list!<CR>

    " Switch between the light and dark Solarized theme
    call togglebg#map("<F5>")

    " Shortcut to edit my .vimrc
    nnoremap <silent> <LocalLeader>ev :e $MYVIMRC<cr>

    " Reload my .vimrc to apply any changes made
    nnoremap <silent> <LocalLeader>sv :so $MYVIMRC<cr>

" }

" Key Mappings - Plugin Specific {

  " Nerdtree {
    " Shortcut for commands
    nnoremap <silent> <LocalLeader>n :NERDTreeToggle<CR>
  " }

  " Powerline {
    nnoremap <LocalLeader>g :GundoToggle<CR>
  " }

  " Taglist {
    nnoremap <silent> <LocalLeader>t :TlistToggle<CR>
  " }

  " Vimux {
    " Run the current file with rspec
    noremap <LocalLeader>rr :call RunVimTmuxCommand("clear; bundle exec rspec " . bufname("%"))<CR>

    " Prompt for a command to run
    noremap <LocalLeader>rp :PromptVimTmuxCommand<CR>

    " Run last command executed by RunVimTmuxCommand
    noremap <LocalLeader>rl :RunLastVimTmuxCommand<CR>

    " Inspect runner pane
    noremap <LocalLeader>ri :InspectVimTmuxRunner<CR>

    " Close vim tmux runner opened by RunVimTmuxCommand
    noremap <LocalLeader>rq :CloseVimTmuxRunner<CR>

    " Close all other tmux panes in current window
    noremap <LocalLeader>rx :CloseVimTmuxPanes<CR>

    " Interrupt any command running in the runner pane
    noremap <LocalLeader>rs :InterruptVimTmuxRunner<CR>
  " }

" }

" Functions {
    " Strip trailing whitespaces (vimcasts.org: episode #4)
    nnoremap <silent> <LocalLeader>sw :call <SID>StripTrailingWhitespaces()<CR>
    function! <SID>StripTrailingWhitespaces()
        " Preparation: save last search, and cursor position.
        let _s=@/
        let l = line(".")
        let c = col(".")
        " Do the business:
        %s/\s\+$//e
        " Clean up: restore previous search history, and cursor position
        let @/=_s
        call cursor(l, c)
    endfunction

    " This is my attempt at making a distraction free writing zone
    " TODO: It could do with some work
    noremap ,df :call DistractionFreeWriting ()<CR>
    function! DistractionFreeWriting ()
        exec ':set fuoptions='
        exec ':set fullscreen'
        exec ':set columns=80'
        exec ':set guioptions-=r'
        exec ':set textwidth=76'
        exec ':set nonumber'
        exec ':set norelativenumber'
    endfunction

    " Show syntax highlighting groups for word under cursor (vimcasts.org: episode #25)
    nnoremap <C-S-S> :call <SID>SynStack()<CR>
    function! <SID>SynStack()
      if !exists("*synstack")
        return
      endif
      echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
    endfunc

    " Set tabstop, softtabstop and shiftwidth to the same value (vimcasts.org: episode #2)
    command! -nargs=* Stab call Stab()
    function! Stab()
      let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
      if l:tabstop > 0
        let &l:sts = l:tabstop
        let &l:ts = l:tabstop
        let &l:sw = l:tabstop
      endif
      call SummarizeTabs()
    endfunction

    function! SummarizeTabs()
      try
        echohl ModeMsg
        echon 'tabstop='.&l:ts
        echon ' shiftwidth='.&l:sw
        echon ' softtabstop='.&l:sts
        if &l:et
          echon ' expandtab'
        else
          echon ' noexpandtab'
        endif
      finally
        echohl None
      endtry
    endfunction
" }

" Configure Plugins {

  " Powerline {
      " let g:Powerline_symbols = 'fancy'
      " let g:Powerline_theme = 'skwp'
      " let g:Powerline_colorscheme = 'skwp'
      " call Pl#Theme#InsertSegment('ws_marker', 'after', 'lineinfo') "Add trailing whitespace indicator
  " }

  " Taglist {
      let Tlist_Use_Right_Window = 1
  " }

  " NERDTree {
      let NERDTreeChDirMode = 2
  " }

  " NumberToggle {
      let g:NumberToggleTrigger = "<LocalLeader>r"
  " }

  " Solarized {
      let g:solarized_visibility = "high"
      let g:solarized_contrast = "high"
  " }

" }

" GUI Settings {
    " GVIM- (here instead of .gvimrc)
    if has('gui_running')
      set background=dark
      color solarized
      set anti                              " antialias font
      set guioptions-=T                     " remove the toolbar
      set guioptions-=L                     " turn off left scrollbar
      set guioptions-=r                     " turn off right scrollbar
      "set guioptions+=rb                    " turn on right and horizontal scrollbars
      set lines=50                           " 50 lines of text instead of 24,
      set columns=200                       " 200 columns
    else
      set background=light
      color solarized
    endif

    " Version specific settings {
        if has("gui_macvim")
          set guifont=Inconsolata:h14           " set font
          set fuoptions=maxvert,maxhorz         " fullscreen options (MacVim only), resized window when changed to fullscreen (max lines and columns)
        endif
    " }
" }
